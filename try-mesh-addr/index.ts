import { MeshWallet, MeshTxBuilder, Transaction, pubKeyAddress } from "@meshsdk/core";
import { serializeAddressObj, serializeRewardAddress } from "@meshsdk/core";
import { deserializeDatum, deserializeAddress } from "@meshsdk/core";
import { resolveTxHash, resolveDataHash, resolveRewardAddress, policyId, resolveFingerprint, resolveEpochNo, resolveSlotNo } from "@meshsdk/core";

import { BlockfrostProvider } from "@meshsdk/core";
import { OgmiosProvider } from "@meshsdk/core";

import { TxParser } from "@meshsdk/core";
import { CSLSerializer } from "@meshsdk/core-csl";

// cannot use this BF (ryo) to submit tx
const bfProvider = new BlockfrostProvider('http://localhost:3000');
// instead, use ogmios to submit tx
const ogmProvider = new OgmiosProvider('ws://localhost:1337');

const wallet = new MeshWallet({
  networkId: 0, // 0: testnet, 1: mainnet
  fetcher: bfProvider,
  submitter: ogmProvider,
  // key: {
  //   type: 'address',
  //   address: 'addr_test1vru2drx33ev6dt8gfq245r5k0tmy7ngqe79va69de9dxkrg09c7d3',
  // },
  // key: {
  //   type: 'cli',
  //   payment: '58204e1eaaad4ed0ab25c802b7dd90fc8e30001c88bb19dd04a0eea592050b80f35d',
  // },
  key: {
    type: 'root',
    bech32: 'xprv16qtcxhmga666e0hshgktssad3hq8zygnjpf5say24ptf8uxh9prnlnsckdml00n0kppp3e2wtqv0zv8vl7glhhkdcnxt3muytl896uczgq7h5fdamvudlkaytjcjjz4c2xltja8mgjzceqqtnkepzd8j55jva356',
  },
});

await wallet.init();

// // sleep for 1 second to ensure wallet is initialized
// await new Promise(resolve => setTimeout(resolve, 3000));

const address = await wallet.getChangeAddress();
// const address = await wallet.getUsedAddresses();
console.log('Change Address:', address);

const balance = await wallet.getBalance();
console.log('Balance:', balance);

// await provider.fetchAddressAssets('addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z')
//   .then((assets) => {
//     console.log('Assets:', assets);
//   })
//   .catch((error) => {
//     console.error('Error fetching assets:', error);
//   });

// const collateralUtxos = await wallet.getCollateral();
// console.log('Collateral Utxos:', collateralUtxos);

// const rewardAddresses = wallet.getRewardAddresses();
// console.log('Reward Addresses:', rewardAddresses);

// const utxos = await wallet.getUtxos();
// console.log('Utxos:', utxos);

// const signature = await wallet.signData('mesh');
// console.log('Signature:', signature);


// const pp = await provider.fetchProtocolParameters();
const txBuilder = new MeshTxBuilder({
  fetcher: bfProvider,
  submitter: ogmProvider,
  evaluator: ogmProvider,
  // params: pp,
  verbose: true,
});

// const utxos = await wallet.getUtxos();
// const changeAddress = await wallet.getChangeAddress();

// const unsignedTx = await txBuilder
//   .txOut('addr_test1vqa25t3aayfmpad20elswmsj94ehmdfjnhc64yz3jg5yl6skf5cck', [{ unit: "lovelace", quantity: '1100000' }])
//   .changeAddress(changeAddress)
//   .selectUtxosFrom(utxos)
//   .complete();

// const signedTx = await wallet.signTx(unsignedTx);
// const txHash = await wallet.submitTx(signedTx);
// console.log('Transaction Hash:', txHash);


// ## RESOLVE
// 
// https://meshjs.dev/apis/utilities/resolvers#resolveTxHash
// 
// const tx = new Transaction({ initiator: wallet });
// tx.sendLovelace('addr_test1vpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0c7e4cxr', '1500000');
// // 
// const unsignedTx = await tx.build();
// const hash1 = resolveTxHash(unsignedTx);
// 
// const signedTx = await wallet.signTx(unsignedTx, false);
// const hash2 = resolveTxHash(signedTx);
// 
// const txHash = await wallet.submitTx(signedTx);
// 
// console.log('Unsigned Transaction Hash:', hash1);
// console.log('Signed Transaction Hash:', hash2);
// console.log('Submitted Transaction Hash:', txHash);


// // https://meshjs.dev/apis/utilities/resolvers#resolveDataHash
// 
// const datum1 = "supersecretdatum";
// const datumHash1 = resolveDataHash(datum1);
// console.log('Datum Hash 1:', datumHash1);


// https://meshjs.dev/apis/utilities/resolvers#resolveFingerprint
// 
// const policyId = '426117329844ccb3b0ba877220ff06a5bdf21eab3fb33e2f3a3f8e69';
// const assetName = '4d657368546f6b656e';
// const assetFingerprint = resolveFingerprint(
//   policyId,
//   assetName
// );
// console.log('Asset Fingerprint:', assetFingerprint);


// DESERIALIZE
// 
// https://meshjs.dev/apis/utilities/deserializers#deserializeAddress
// 
// const addressObj = deserializeAddress("addr_test1qpse7xqay7zjx8vrqkpuyxxkum70hcvz86jdxz9td5c8pxwz89h6y59fanmeweaj5wjn3gjsc5et5d4sd37dlfxlfj3swqwzjj")
// console.log('Deserialized Address:', addressObj);

// https://meshjs.dev/apis/utilities/serializers#serializeAddressObj
// 
// const paymentPubKeyAddr = pubKeyAddress(
//   addressObj.pubKeyHash,
// );
// const paymentAddr = serializeAddressObj(paymentPubKeyAddr, 0);
// console.log('Serialized Payment Address:', paymentAddr);

// https://meshjs.dev/apis/utilities/serializers#serializeRewardAddress
// 
// const stakeAddr = serializeRewardAddress(addressObj.stakeCredentialHash, false, 0);
// console.log('Serialized Stake Address:', stakeAddr);
// console.log('Resolved Stake Address:', resolveRewardAddress('addr_test1qpse7xqay7zjx8vrqkpuyxxkum70hcvz86jdxz9td5c8pxwz89h6y59fanmeweaj5wjn3gjsc5et5d4sd37dlfxlfj3swqwzjj'));

// https://meshjs.dev/apis/utilities/deserializers#deserializeDatum
// 
// const datumJSON = deserializeDatum("82018282051a05f5e0ff8200581c5867c3b8e27840f556ac268b781578b14c5661fc63ee720dbeab663f");
// console.log('Datum JSON:', datumJSON);


// // https://meshjs.dev/apis/utilities/resolvers#resolveEpochNumber
// const epoch = resolveEpochNo('preview');
// console.log('Epoch Number:', epoch);

// // https://meshjs.dev/apis/utilities/resolvers#resolveSlotNumber
// const slot = resolveSlotNo('preview');
// console.log('Slot Number:', slot);

// let oneYearFromNow = new Date();
// oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() + 1);
// const epoch2 = resolveEpochNo('preview', oneYearFromNow.getTime());
// console.log('Epoch Number 1 year later:', epoch2);
// const slot2 = resolveSlotNo('preview', oneYearFromNow.getTime());
// console.log('Slot Number 1 year later:', slot2);


// https://meshjs.dev/apis/txparser/basics#initializeTxParser
const fetcher = bfProvider;
const serializer = new CSLSerializer();
const txParser = new TxParser(serializer, fetcher);

// console.log('Tx CBOR:', unsignedTx);
// const txHex = "84a400d901028182582032ca8fbb81a3372b85241819b98dd12838c55c30702f3ea451afa733825c5e5a01018282581d605867c3b8e27840f556ac268b781578b14c5661fc63ee720dbeab663f1a0016e36082583900619f181d2785231d830583c218d6e6fcfbe1823ea4d308ab6d307099c2396fa250a9ecf79767b2a3a538a250c532ba36b06c7cdfa4df4ca31a06fb2f6c021a00029335075820bdaa99eb158414dea0a91d6c727e2268574b23efe6e08ab3b841abe8059a030ca0f5d90103a0"
const txHex = ""

// https://meshjs.dev/apis/txparser/basics#rebuildTx
const txBuilderBody = await txParser.parse(txHex, []);
console.log('Parsed Transaction Body:', txBuilderBody);

// const txBuilder2 = new MeshTxBuilder({
//   fetcher: bfProvider,
//   submitter: ogmProvider,
//   evaluator: ogmProvider,
//   // params: pp,
//   verbose: true,
// });

// const x = txBuilder2.meshTxBuilderBody(txBuilderBody);
// console.log('Rebuilt Transaction:', x);
